import Head from 'next/head';
import styles from '../styles/Test.module.css';
import type { GetServerSideProps, NextPage } from 'next';
import sha256 from 'crypto-js/sha256';
import CryptoJS from 'crypto-js';
import { useRouter } from 'next/router';
import { useState } from 'react';
import LoginForm from '@/components/forms/LoginForm';
import RegisterForm from '@/components/forms/RegisterForm';
import getGoogleOAuthUrl from '../lib/client/getGoogleUrl';
import getFacebookUrl from '../lib/client/getFacebookUrl';

const Login: NextPage<{ code_challenge: string }> = ({ code_challenge }) => {
  const router = useRouter();
  const [serverError, setServerError] = useState<string | null>(null); // can pass setServerError as prop to both form components
  const [isLoginView, setIsLoginView] = useState<boolean>(true);

  return (
    <div>
      <Head>
        <title>RemindMe</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div
          className={`bg-blueGrey-400 w-full h-screen ${styles.wrapper} items-center overflow-auto`}
        >
          <div className="col-start-4 col-end-10 row-span-1 row-end-3  flex justify-center  w-full h-full ">
            <div
              id="left"
              className="w-full flex flex-col p-3 h-full justify-between"
            >
              <div className=" h-full flex flex-col justify-center pl-7">
                <div className="font-semibold text-5xl">RemindMe</div>
                <div className="text-blueGrey-200 mt-3">
                  Did you forget something?
                </div>
              </div>
              <div className=" h-full pl-7 font-medium text-lg mt-5">
                Say goodbye to belated birthday wishes and missed dentist
                appointments
              </div>
              <div className=" h-full pl-7 font-medium text-lg">
                Use RemindMe to forget about forgetting
              </div>
            </div>
            <div
              id="right"
              className="w-full bg-blueGrey-900 border rounded-3xl p-3"
            >
              <div id="serverError">
                {serverError && (
                  <p className="error mt-5 mb-5 text-red-500">{serverError}</p>
                )}
              </div>
              <div id="formRender">
                {isLoginView ? (
                  <LoginForm router={router} setServerError={setServerError} />
                ) : (
                  <RegisterForm
                    router={router}
                    setServerError={setServerError}
                  />
                )}
              </div>
              <div id="OAuthLogin">
                {' '}
                <button onClick={() => router.push(getGoogleOAuthUrl())}>
                  Log in with Google
                </button>
                <button
                  className="mt-10"
                  onClick={() => router.push(getFacebookUrl(code_challenge))}
                >
                  Log in with Facebook
                </button>
              </div>
              <div id="footerText">Dont have an account? Sign up now</div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Login;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const code_verifier = process.env.CODE_VERIFIER as string;
  const hash = sha256(code_verifier);
  const code_challenge = CryptoJS.enc.Base64url.stringify(hash);
  return {
    props: {
      code_challenge: code_challenge,
    },
  };
};
